%=============================================================================
% Turing -- (turing.sty) Style file
% A LaTeX class for defining and using Turing machines.
% Author: Mark Schaefer (mark.schaefer@informatik.uni-augsburg.de)
%         University of Augsburg, Germany
%
% Copyright (c) 2006 Mark Schaefer
% All rights reserved.
%
% Permission is hereby granted, without written agreement and without
% license or royalty fees, to use, copy, modify, and distribute this
% software and its documentation for any purpose, provided that the
% above copyright notice and the following two paragraphs appear in
% all copies of this software.
%
% IN NO EVENT SHALL THE AUTHOR BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
% SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OF
% THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE AUTHOR HAS BEEN ADVISED
% OF THE POSSIBILITY OF SUCH DAMAGE.
%
% THE AUTHOR SPECIFICALLY DISCLAIMS ANY WARRANTIES,
% INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
% AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
% ON AN "AS IS" BASIS, AND THE AUTHOR HAS NO OBLIGATION TO
% PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
%
%==============================================================================
% This package allows the definition, simulation and graphical display of
% deterministic Turing machines. For the time being this manual assumes that
% the reader is familiar with this concept.
% 
% One can initialise a new Turing machine by \newtm<start,stop>(band content).
% The band entries have to be separated by a ',', after the rightmost entry,
% no ',' is allowed. start and stop denote states of the Turing machine
% (obviously, THE start and THE stop state). In general states and band entries
% can be arbitrary strings, where '-' is used as blank, special characters have
% to be escaped, e.g. as \# Don't use '=' for states or entries.
% 
% For example: \newtm<q0,stop>(-,1,0,1,0,\#,1,0,1,-)
% 
% The next-state function is defined by \turingrules{rule1,rule2,...,ruleN}, as
% for the band entries, rules are separated by ',' and again after the last
% rule, no ',' is allowed. % Rules have the form
%   (old_state, current_entry, new_state, new_entry, (L|H|R)}.
% 
% For example: \turingrules{(q0,0,q0,1,R),(q0,1,q0,0,R),(q0,-,stop,-,H)}
% 
% Note that the next-state function does not have to be complete; an error
% message is generated if an entry is not found while the old state of the
% Turing machine is preserved.
%
% A graphical representation is generated by \showtm, the following state is
% generated by \nextstep. Once, the stop-state is reached, \nextstep will have
% no effect.
% 
% For convenience, there are the following three commands:
% 
%   - \stepandshow<number> : makes a step and shows the next state, this is repeated <number> times,
%                            e.g. \stepandshow{100}
%   - \loopstep<number>    : same as \stepandshow<number>, but the intermediate results are not printed
% 
%   - \runtm               : same as \stepandshow, but the Turing machine stops automatically, if
%                            the stop state was reached
%                            Caution! The Turing machine may run forever, and so will latex.
% 
% Have a look at the output of TeX, error messages will be reported there.
%==============================================================================


\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{turing}[2006/02/17]
\message{This is Turing-Tex.}

\def\newworld{=}
\def\blank{-}


\def\newtm<#1,#2>(#3){
  \xdef\tm{(=,)(#1)(#3,=,)}
  \xdef\stopstate{#2}
  \xdef\stopreached{no}
}


\def\turingrules#1{
  \xdef\rules{#1,(,,,,),}
}

\def\findstate(#1,#2)(#3)(#4,#5,#6);{
  \xdef\farleft{#2}
  \xdef\left{#1}
  \xdef\state{#3}
  \xdef\value{#4}
  \xdef\right{#5}
  \xdef\farright{#6}
}


\newif\ifnorulegiven
\newif\ifnorulefound


\def\findrule{
  \norulegivenfalse
  \norulefoundtrue
  \xdef\remrules{\rules}
  \loop
    \expandafter\findr\remrules;
  \ifnorulefound
  \repeat
}


\def\findr(#1,#2,#3,#4,#5),#6;{
  \edef\stpe{#1}
  \edef\stpv{#2}
  \ifx\state\stpe
    \ifx\value\stpv
      \norulefoundfalse
      \xdef\newstate{#3}
      \xdef\newvalue{#4}
      \xdef\direction{#5}
    \fi
  \fi

  \xdef\remrules{#6}
  \ifx\empty\remrules
    \norulefoundfalse
    \norulegiventrue
  \fi
}

\def\nextstep{
  \expandafter\findstate\tm;
  \findrule

  \ifx\newstate\stopstate\xdef\stopreached{yes}\fi

  \ifnorulegiven
    \ifx\state\stopstate
      \message{Turing machine reached stop state.}    
    \else
      \message{Rule not found for (state,value) (\state,\value)}
    \fi
  \else
    \def\leftm{L}
    \def\rightm{R}
    \def\middlem{H}

    \if\direction\leftm
      \if\left\newworld
        \xdef\tm{(=,\farleft)(\newstate)(-,\newvalue,\right,\farright)}
      \else
        \xdef\tm{(\farleft)(\newstate)(\left,\newvalue,\right,\farright)}
      \fi
    \else\if\direction\rightm
      \if\right\newworld
        \xdef\tm{(\newvalue,\left,\farleft)(\newstate)(-,=,\farright)}
      \else
        \xdef\tm{(\newvalue,\left,\farleft)(\newstate)(\right,\farright)}
      \fi
    \else\if\direction\middlem
        \xdef\tm{(\left,\farleft)(\newstate)(\newvalue,\right,\farright)}
    \fi\fi\fi

  \fi
}


\def\spec#1{\vbox{\hbox to 1em {\vrule height0.1em depth0.2em\hfill#1\hfill{}\vrule height0.1em}\hrule}}
\def\speca#1{\vbox{\hrule\hbox to 1em {\vrule height0.8em depth0.2em\hfill#1\hfill{}\vrule height0.8em}\hrule}}


\newif\iftmfull
\newif\ifnextvalue

\def\showtm{
  \xdef\result{}

  \expandafter\findstate\tm;

  \tmfulltrue
  \edef\remtm{\left,\farleft}
  \loop
    \expandafter\mkleft\remtm;
  \iftmfull
  \repeat

  \if\value\blank
    \xdef\result{\result\speca{}\ }
  \else
    \xdef\result{\result\speca{\value}\ }
  \fi

  \tmfulltrue
  \edef\remtm{\right,\farright}
  \loop
    \expandafter\mkright\remtm;
  \iftmfull
  \repeat

  \mbox{}\result\hskip3em(\state)
}

\def\mkleft#1,#2;{
  \edef\next{#1}
  \if\next\newworld
    \xdef\result{\spec{}\ \result}
  \else\if\next\blank
    \xdef\result{\result\spec{}\ }
  \else
    \xdef\result{\spec{#1}\ \result}
  \fi\fi
  \edef\remtm{#2}
  \ifx\empty\remtm
    \tmfullfalse
  \fi
}

\def\mkright#1,#2;{
  \edef\next{#1}
  \if\next\newworld
    \xdef\result{\result\spec{}\ }
  \else\if\next\blank
    \xdef\result{\result\spec{}\ }
  \else
    \xdef\result{\result\spec{#1}\ }
  \fi\fi
  \edef\remtm{#2}
  \ifx\empty\remtm
    \tmfullfalse
  \fi
}



\def\stepandshow#1{%
\newcount\tmit
\tmit=#1
\loop
   {\nextstep\showtm}
   \advance\tmit by -1
   \ifnum\tmit>0
\repeat
}


\def\runtm{%
\loop
   {\nextstep\showtm}
   \def\next{no}
   \ifx\next\stopreached
\repeat
}



\def\loopstep#1{%
\newcount\tmit
\tmit=#1
\loop
   {\nextstep}
   \advance\tmit by -1
   \ifnum\tmit>0
\repeat
}




\endinput